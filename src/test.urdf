<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from src/ros2_control_demo_3r_robot/description/example_robot.urdf.xacro | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="robot">
  <!-- This is an example of a URDF. -->
  <!-- As we move through the file, new things to note will be pointed out. -->
  <!-- It's not meant an example of GOOD design, but an example of some of the various features of URDF/xacro. -->
  <!-- This file is not a robot in and of itself, it just contains some useful tags that could be included in any robot -->
  <!-- Specify some colours -->
  <material name="white">
    <color rgba="1 1 1 1"/>
  </material>
  <material name="orange">
    <color rgba="1 0.3 0.1 1"/>
  </material>
  <material name="blue">
    <color rgba="0.2 0.2 1 1"/>
  </material>
  <!-- Specify some standard inertial calculations https://en.wikipedia.org/wiki/List_of_moments_of_inertia -->
  <!-- These make use of xacro's mathematical functionality -->
  <!-- This first link called "world" is empty -->
  <link name="world"/>
  <!-- A simple fixed joint from our empty world link, to our base. -->
  <!-- The base origin is offset from the world origin. -->
  <joint name="base_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="world"/>
    <child link="link_0"/>
  </joint>
  <!-- base_link is a large rectangular plate. Some things to note: -->
  <!-- - We set the visual origin Z to half the box height, so that the link origin sits at the bottom of the box -->
  <!-- - We set the collision to be identical to the visual -->
  <!-- - We specified the colour manually (but still need to enter a name) -->
  <!-- - We specified all the inertial parameters manually -->
  <link name="link_0">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0.0"/>
      <geometry>
        <!-- <box size="2.5 1.5 0.1" /> -->
        <mesh filename="file:////home/azthorax/fra333_ws/install/ros2_control_demo_3r_robot/share/ros2_control_demo_3r_robot/meshes/link_0.stl"/>
      </geometry>
      <material name="green">
        <color rgba="0.2 1 0.2 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0.0"/>
      <contact_coefficients kd="1.0" kp="1000.0" mu="0"/>
      <geometry>
        <mesh filename="file:////home/azthorax/fra333_ws/install/ros2_control_demo_3r_robot/share/ros2_control_demo_3r_robot/meshes/link_0.stl"/>
        <!-- <box size="2.5 1.5 0.1" /> -->
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0.05"/>
      <mass value="120"/>
      <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
    </inertial>
  </link>
  <joint name="joint_0" type="fixed">
    <parent link="link_0"/>
    <child link="link_1"/>
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <axis xyz="0 0 1"/>
    <limit effort="1000" lower="-3.14" upper="3.14" velocity="0.5"/>
  </joint>
  <link name="link_1">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0.0"/>
      <geometry>
        <!-- <box size="2.5 1.5 0.1" /> -->
        <mesh filename="file:////home/azthorax/fra333_ws/install/ros2_control_demo_3r_robot/share/ros2_control_demo_3r_robot/meshes/link_1.stl"/>
      </geometry>
      <material name="green">
        <color rgba="0.2 1 0.2 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0.0"/>
      <contact_coefficients kd="1.0" kp="1000.0" mu="0"/>
      <geometry>
        <mesh filename="file:////home/azthorax/fra333_ws/install/ros2_control_demo_3r_robot/share/ros2_control_demo_3r_robot/meshes/link_1.stl"/>
        <!-- <box size="0.01 0.01 0.01" /> -->
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0.0"/>
      <mass value="25"/>
      <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
    </inertial>
  </link>
  <joint name="joint_1" type="revolute">
    <parent link="link_0"/>
    <child link="link_1"/>
    <origin rpy="0 0 0" xyz="0 0 0.16"/>
    <axis xyz="0 0 1"/>
    <limit effort="1000" lower="-3.14" upper="3.14" velocity="0.5"/>
    <dynamics damping="0" friction="0"/>
  </joint>
  <link name="link_2">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0.0"/>
      <geometry>
        <!-- <box size="2.5 1.5 0.1" /> -->
        <mesh filename="file:////home/azthorax/fra333_ws/install/ros2_control_demo_3r_robot/share/ros2_control_demo_3r_robot/meshes/link_2.stl"/>
      </geometry>
      <material name="green">
        <color rgba="0.2 1 0.2 1"/>
      </material>
    </visual>
    <collision>
      <contact_coefficients kd="1.0" kp="1000.0" mu="0"/>
      <origin rpy="0 0 0" xyz="0 0 0.0"/>
      <geometry>
        <!-- <box size="0.01 0.01 0.01" /> -->
        <mesh filename="file:////home/azthorax/fra333_ws/install/ros2_control_demo_3r_robot/share/ros2_control_demo_3r_robot/meshes/link_2.stl"/>
        <!-- <box size="2.5 1.5 0.1" /> -->
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0.0"/>
      <mass value="15"/>
      <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
    </inertial>
  </link>
  <joint name="joint_2" type="revolute">
    <parent link="link_1"/>
    <child link="link_2"/>
    <origin rpy="1.57079632679   0 0" xyz="0 0 0"/>
    <axis xyz="0 0 1"/>
    <limit effort="0.5" lower="-3.14" upper="3.14" velocity="0.5"/>
    <dynamics damping="10" friction="10"/>
  </joint>
  <link name="link_3">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0.0"/>
      <geometry>
        <mesh filename="file:////home/azthorax/fra333_ws/install/ros2_control_demo_3r_robot/share/ros2_control_demo_3r_robot/meshes/link_3.stl"/>
      </geometry>
      <material name="green">
        <color rgba="0.2 1 0.2 1"/>
      </material>
    </visual>
    <collision>
      <contact_coefficients kd="1.0" kp="1000.0" mu="0"/>
      <origin rpy="0 0 0" xyz="0 0 0.0"/>
      <geometry>
        <mesh filename="file:////home/azthorax/fra333_ws/install/ros2_control_demo_3r_robot/share/ros2_control_demo_3r_robot/meshes/link_3.stl"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0.0"/>
      <mass value="5"/>
      <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
    </inertial>
  </link>
  <joint name="joint_3" type="revolute">
    <parent link="link_2"/>
    <child link="link_3"/>
    <origin rpy="0 0 0" xyz="0.37 0 0"/>
    <axis xyz="0 0 1"/>
    <limit effort="1000" lower="-3.14" upper="3.14" velocity="0.5"/>
    <dynamics damping="10" friction="10"/>
  </joint>
  <joint name="joint_eff" type="fixed">
    <parent link="link_3"/>
    <child link="end_effector"/>
    <origin rpy="1.57 0 1.57" xyz="0.26 0 0"/>
    <axis xyz="0 0 1"/>
  </joint>
  <link name="end_effector">
    </link>
  <!-- This file demonstrates the use of some <gazebo> tags -->
  <!-- To include it add the following line -->
  <!-- <xacro:include filename="example_gazebo.xacro" /> -->
  <!-- Gazebo is unable to use the same <material> tags that are already in the URDF (that RViz uses). -->
  <!-- Instead, we need to add gazebo tags for our links that refer to Gazebo materials -->
  <!-- <gazebo reference="slider_link">
        <material>Gazebo/Blue</material>
    </gazebo>

    <gazebo reference="arm_link">
        <material>Gazebo/Orange</material>
    </gazebo> -->
  <!-- Gazebo requires the use of plugins to interact with other systems such as ROS. -->
  <!-- This plugin will publish the joint_states for the selected joints 
            (which robot_state_publisher can then use to broadcast the approprate tf). -->
  <!-- This plugin will read a JointTrajectory message from the /set_joint_trajectory topic 
            and move the machine accordingly. It's a bit clunky but it works. -->
  <!-- You'll probably want to add damping to the joints to stop them it flopping around. 
            e.g. <dynamics damping="10.0" friction="10.0"/> -->
  <!-- Here's an example message to publish to test it:
            ros2 topic pub -1 /set_joint_trajectory trajectory_msgs/msg/JointTrajectory  '{header: {frame_id: world}, joint_names: [slider_joint, arm_joint], points: [  {positions: {0.8,0.6}} ]}' -->
  <gazebo>
    <plugin filename="libgazebo_ros_joint_pose_trajectory.so" name="gazebo_ros_joint_pose_trajectory">
      <update_rate>2</update_rate>
    </plugin>
  </gazebo>
  <ros2_control name="GazeboSystem" type="system">
    <hardware>
      <plugin>gazebo_ros2_control/GazeboSystem</plugin>
    </hardware>
    <joint name="joint_1">
      <command_interface name="position">
        <param name="min">-3.14</param>
        <param name="max">3.14</param>
      </command_interface>
      <state_interface name="position">
        <param name="initial_value">0.0</param>
      </state_interface>
      <state_interface name="velocity"/>
      <state_interface name="effort"/>
    </joint>
    <joint name="joint_2">
      <command_interface name="position">
        <param name="min">-3.14</param>
        <param name="max">3.14</param>
      </command_interface>
      <state_interface name="position">
        <param name="initial_value">0.0</param>
      </state_interface>
      <state_interface name="velocity"/>
      <state_interface name="effort"/>
    </joint>
    <joint name="joint_3">
      <command_interface name="position">
        <param name="min">-3.14</param>
        <param name="max">3.14</param>
      </command_interface>
      <state_interface name="position">
        <param name="initial_value">0.0</param>
      </state_interface>
      <state_interface name="velocity"/>
      <state_interface name="effort"/>
    </joint>
  </ros2_control>
  <gazebo>
    <plugin filename="libgazebo_ros2_control.so" name="gazebo_ros2_control">
      <robot_sim_type>gazebo_ros2_control/GazeboSystem</robot_sim_type>
      <parameters>/home/azthorax/fra333_ws/install/ros2_control_demo_3r_robot/share/ros2_control_demo_3r_robot/config/myrobot_controllers.yaml</parameters>
    </plugin>
  </gazebo>
  <gazebo reference="link_0">
    <mu1>0.2</mu1>
    <mu2>0.2</mu2>
    <material>Gazebo/Green</material>
  </gazebo>
  <gazebo reference="link_1">
    <mu1>0.2</mu1>
    <mu2>0.2</mu2>
    <material>Gazebo/Green</material>
  </gazebo>
  <gazebo reference="link_2">
    <mu1>0.2</mu1>
    <mu2>0.2</mu2>
    <material>Gazebo/Black</material>
  </gazebo>
  <gazebo reference="link_3">
    <mu1>0.2</mu1>
    <mu2>0.2</mu2>
    <material>Gazebo/Black</material>
  </gazebo>
  <!-- The next section shows an example of adding a sensor, in this case a depth camera. -->
  <!-- Due to a quirk of how cameras work, an extra joint/link is required to create an
            "optical frame" for the sensor. That isn't the focus for this tutorial, but you can
            look at https://www.ros.org/reps/rep-0103.html#suffix-frames for slightly more information. -->
  <!-- First, create the link and joint for the optical frame -->
  <!-- <joint name="camera_optical_joint" type="fixed">
        <origin xyz="0 0 0" rpy="-1.571 0 -1.571" />
        <parent link="camera_link" />
        <child link="camera_link_optical" />
    </joint>

    <link name="camera_link_optical"></link> -->
  <!-- Add a gazebo tag for the ORIGINAL camera_link (but in the plugin we reference the optical frame so that ROS can orient things correctly) -->
  <!-- Within the gazebo tag we have the sensor tag, and inside that there is (among other things) the camera tag with the camera parameters, 
            and the plugin tag with some extra parameters the plugin needs. -->
  <!-- Note that although visualise is set to true, it won't actually visualise the depth camera in gazebo. To see the preview, 
            try swapping "depth" to "camera"-->
  <!-- <gazebo reference="camera_link">
        <sensor type="depth" name="my_camera">
            <update_rate>20</update_rate>
            <visualize>true</visualize>
            <camera name="cam">
                <horizontal_fov>1.3962634</horizontal_fov>
                <image>
                    <width>640</width>
                    <height>480</height>
                    <format>R8B8G8</format>
                </image>
                <clip>
                    <near>0.02</near>
                    <far>300</far>
                </clip>
                <noise>
                    <type>gaussian</type>
                    <mean>0.0</mean>
                    <stddev>0.007</stddev>
                </noise>
            </camera>
            <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
                <frame_name>camera_link_optical</frame_name>
                <min_depth>0.1</min_depth>
                <max_depth>500</max_depth>
            </plugin>
        </sensor>
    </gazebo> -->
</robot>
